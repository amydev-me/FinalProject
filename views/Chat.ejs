<!DOCTYPE html>
<html>
<head>
    <title>MyChat</title>
    <link rel="icon" type="image/x-icon" href="/images/favicon.png">
    <link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,600,700,300' rel='stylesheet' type='text/css'>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
    <link href="https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">

    <link rel='stylesheet prefetch' href='https://cdnjs.cloudflare.com/ajax/libs/meyer-reset/2.0/reset.min.css'>
    <link rel='stylesheet prefetch' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.2/css/font-awesome.min.css'>
     <link rel="stylesheet" href="./css/chat.css">
    
     <link rel="stylesheet" href="./css/right.css">
 </head>
<body>
   
    <div id="frame">
       
        <div id="rightsidepanel" style="border-left: 0.5px solid #99999B;" v-show="showGroup ">
            <div id="profile">
                <div class="wrap">
                    <button type="button" class="close" @click="showGroup = false;" style="float:left"> 
                        <i class="fa fa-times"  style="color: white !important;"></i>
                    </button>
                    <p style="margin-top:-20px">Group Info</p>
                </div>
            </div> 
            <div id="profile">
                <div   style="text-align: center;;" >
                    <img id="profile-img" src="./images/user.png" class="online" alt="" style="display:block; margin:auto !important;" width="100"/>
                    <p style="display:block; margin:auto !important;margin-top:5px;font-size:28px;">{{selected_chat_name}}</p>
                </div>
            </div>

            <div id="contacts">
                <ul>
                    <li :key="index" class="contact" v-for="(item,index) in selected_chat_participants">
                        <div class="wrap" >
                            <img src="./images/user.png"  />
                            <div class="meta">
                                
                                <p class="name">{{item.name}} </p>
                                <p class="preview">{{item.position}}</p>
                                
                            </div>
                            

                        </div> 
                        <span class="preview" style="margin-top:2px;color:orange;" v-if="selected_chat?(selected_chat.createdBy._id == item._id?true:false):false"> Group Creator </span>

                    </li> 
                </ul>
            </div>
        </div>
        <!--END GROUP NEW CHAT-->

        <div id="sidepanel" style="border-right: 0.5px solid #99999B;" v-show="showContact == 2">
            <div id="profile">
                <div class="wrap">
                    <p>New Chat</p>
                    <button type="button" class="close" @click="showContact = 0;"> 
                        <i class="fa fa-times"  style="color: white !important;"></i>
                    </button>
                </div>
            </div> 
            <div id="contacts" v-show="showContact == 2"> 
                <ul>
                    <li :key="index" class="contact" v-for="(item,index) in employees" @click="onClickedEmployee(item)">
                        
                        <div class="wrap" >
                            <img src="./images/user.png"  />
                            <div class="meta">
                                <p class="name">{{item.name}}</p>
                               <p class="preview">{{item.position}}</p>
                            </div>
                        </div> 
                    </li> 
                </ul>
            </div>
            
        </div>
        <!--END NEW CHAT-->
        <div id="sidepanel" style="border-right: 0.5px solid #99999B;" v-show="showContact== 1">
            <div id="profile">
                <div class="wrap">
                    <p>Add Group participants</p>
                    <button type="button" class="close" @click="showContact = 0;"> 
                        <i class="fa fa-times"  style="color: white !important;"></i>
                    </button>
                </div>
            </div>
            <div id="group-name">
                <input type="text" placeholder="Group Name" style="margin-bottom:5px;" v-model="group.name"/>
               
            </div>
            <div id="contacts" v-show="showContact == 1"> 
                <ul>
                    <li :key="index" class="contact" v-for="(item,index) in employees">
                        <input type="checkbox" v-model="item.selected">
                        <div class="wrap" >
                            <img src="./images/user.png"  />
                            <div class="meta">
                                <p class="name">{{item.name}}</p>
                               <p class="preview">{{item.position}}</p>
                            </div>
                        </div> 
                    </li> 
                </ul>
            </div>
            <div id="group-bar" style="margin:0 auto;padding: 0 auto;" v-if="group.name" >
                <button  id="addcontact" @click="onClickedCreateGroup" ><i class="fa fa-user-plus fa-fw" aria-hidden="true" ></i> <span>Create Group</span></button> 
            </div>
        </div>
        <!--END GROUP NEW CHAT-->
     
        <div id="sidepanel" style="border-right: 0.5px solid #99999B;" v-show="showContact == 0">
          
            <div id="profile">
                <div class="wrap">
                    <img id="profile-img" src="./images/user.png" class="online" alt="" />
                    <p style="color:white;font-weight: bold;">{{current_user.name}}</p>
                    <i class="fa fa-chevron-down expand-button" aria-hidden="true"></i>
                    <div id="status-options">
                        <ul>
                            <li id="status-online" class="active"><span class="status-circle"></span> <p>Online</p></li>
                            <li id="status-away"><span class="status-circle"></span> <p>Away</p></li>
                            <li id="status-busy"><span class="status-circle"></span> <p>Busy</p></li>
                            <li id="status-offline"><span class="status-circle"></span> <p>Offline</p></li>
                        </ul>
                    </div>
                    <div id="expanded">
                        <label for="twitter"><i class="fa fa-facebook fa-fw" aria-hidden="true"></i></label>
                        <input name="twitter" type="text" value="mikeross" />
                        <label for="twitter"><i class="fa fa-twitter fa-fw" aria-hidden="true"></i></label>
                        <input name="twitter" type="text" value="ross81" />
                        <label for="twitter"><i class="fa fa-instagram fa-fw" aria-hidden="true"></i></label>
                        <input name="twitter" type="text" value="mike.ross" />
                    </div>
                </div>
            </div>
            <div id="search">
                <label for=""><i class="fa fa-search" aria-hidden="true"></i></label>
                <input type="text" placeholder="Search contacts..." />
            </div>
          
            <div id="contacts" style="margin-top:2px;">
              
                <ul>
                    <li :key="index" :class="selected_chat_id == item._id ? 'contact active' : 'contact'" v-for="(item,index) in chats" @click="onClickedChat(item, index)">
                      
                        <div class="wrap" v-if="!item.is_group">
                            <img src="./images/user.png" alt="" />
                            <div class="meta">
                                <p class="preview"> {{item.employees?item.employees.find(e => e._id != current_user._id).name:null}} 
                                  
                                    <span class="circle1" style="float:right !important" v-if="item.participants.find(e=>e.employee_id == current_user._id).unread_count > 0"> 
                                        {{
                                            item.participants.find(e=>e.employee_id == current_user._id).unread_count
                                        }}
                                    </span>   
                                 
                                </p> 
                                <div class="preview ">{{item.last_message.length > 10 ? item.last_message.slice(0,10) + '...': item.last_message}}    <span  style="float:right !important;margin-right:25px;">{{formatDate(item.updatedAt)}}</span></div> 
                            </div>
                        </div>
                        <div class="wrap" v-if="item.is_group">
                           
                            <img src="./images/group.png" alt="" />
                            <div class="meta">
                                <p class="preview">
                                    {{item.name}}
                                    <span class="circle1" style="float:right !important" v-if="item.participants.find(e=>e.employee_id == current_user._id).unread_count > 0"> 
                                        {{
                                            item.participants.find(e=>e.employee_id == current_user._id).unread_count
                                        }}
                                    </span> 
                                </p>
                                <p class="preview" v-if="item.last_message"><span>{{item.last_sender?item.last_sender.name:null}} : </span></span>{{item.last_message.length > 10 ? item.last_message.slice(0,10) + '...': item.last_message}}</p>
                                <p class="preview" v-if="!item.last_message">Created New Group by : {{item.createdBy?item.createdBy.name:null}}</p>

                            </div>
                           
                       </div>
                      
                    </li> 
                </ul>
            </div>
            <div id="bottom-bar">
                <button id="settings" @click="showContact = 2"><i class="fa fa-cog fa-fw" aria-hidden="true"></i> <span>New Chat</span></button>

                <button id="addcontact" @click="onClickedGroupSidebar"><i class="fa fa-users fa-fw" aria-hidden="true" ></i> <span>New Group</span></button>
            </div>
        </div>
        <!--END Left Sidebar-->


        <div class="content" v-if="selected_chat_id || isNew">
            <div class="contact-profile" @click="onClickedShowGroupInfo">
                <img src="./images/user.png" alt="" />
                <p style="color: white;font-weight: bold;">{{selected_chat_name}}</p>
                
                <div class="social-media">
                    <i class="fa fa-facebook" aria-hidden="true"></i>
                    <i class="fa fa-twitter" aria-hidden="true"></i>
                    <i class="fa fa-instagram" aria-hidden="true"></i>
                </div>
            </div>
            <div class="messages" id="scroll-to-bottom">
                <ul>
                    <li  :class="message.sender_id._id == current_user._id ? 'replies' : 'sent'" v-for="message in conversations">
                        <p>
                            <span style="font-size:12px;float: left;color:#fc9775;font-weight:bold;" v-if="message.sender_id._id != current_user._id">{{(message.sender_id.name)}}</span> <br v-if="message.sender_id._id != current_user._id">
                            {{message.message}}<br>
                            <span style="font-size:10px;float: right;;">{{formatDate(message.createdAt)}}</span> 
                        </p> 
                    </li>
                </ul>
            </div>
            <div class="message-input">
                <div class="wrap" style="margin-bottom: 5px;;">
                    <i class="fa fa-paperclip attachment" aria-hidden="true"></i>

                    <input v-on:keyup.enter="onClickedSend" v-model="message" type="text" placeholder="Write your message..." style="background-color: #2A3A42 ;color:white"/>
                    <button class="submit" @click="onClickedScoll"><i class="fa fa-paper-plane" aria-hidden="true"></i></button>
                </div>
            </div>
        </div>
        <div class="content" v-if="!selected_chat_id && !isNew" style="background-image:url('./images/Screenshot.png');background-repeat: no-repeat;background-attachment: fixed;background-size: 600px;background-position: center;"> 
        </div>
    </div>

    
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <script src="./js/lodash.js"></script>
    <script src="./js/socket.io.js"></script>
    
    <script>
        const { createApp } = Vue
        
        createApp({
            data() {
                return {
                    socket :  io(),
                    isNew : false,
                    group :{
                        name : null,
                        employees : []
                    }, 
                    showContact: 0, 
                    //   ('http://localhost:3000',{
                    //       secure: true,
                    //       rejectUnauthorized: false,
                    //       rememberUpgrade:true 
                    //   })
                    message : null,
                    conversations : [],
                    chats : [],
                    employees:[], 
                    selected_chat_id : null,
                    current_user : {
                        _id : null,
                        name : null
                    },
                    receiver_id : null,
                    selected_chat_name : null,
                    showGroup : false,
                    selected_chat_participants : [],
                    selected_chat : null
                }
            },
            methods : {
                onClickedShowGroupInfo(){
                    this.showGroup = true
                    
                },
                formatDate(_date){
                    return moment(_date).format('hh:mm A')
                },
                onSocket(chat_id){
                    let that  = this;
                    this.socket.on(`chat-id-${chat_id}`, (payload) => {  
                        let message  = payload.message; 

                        if(that.selected_chat_id != chat_id){ 
                            let payloadChat = payload.chats[0]; 
                            let _chatIndex = this.chats.findIndex(e => e._id == chat_id);  
                            
                            if(_chatIndex > -1){
                                this.chats[_chatIndex].last_sender = payloadChat.last_sender;
                                this.chats[_chatIndex].last_message = message.message;

                                let _partIndex = this.chats[_chatIndex].participants.findIndex(e => e.employee_id == this.current_user._id);                               
                                this.chats[_chatIndex].participants[_partIndex].unread_count = +this.chats[_chatIndex].participants[_partIndex].unread_count + 1;                  
                                
                            } 
                        }else{
                            if(that.current_user._id != message.sender_id._id){ 
                                this.conversations.push(message);
                                if(this.selected_chat_id){
                                    setTimeout(function(){
                                        that.onClickedScoll()
                                    },100)
                                } 
                            }
                        }
                    });
                },
                onClickedGroupSidebar(){
                    this.showContact = 1;
                },
                onClickedScoll(){
                    let scroll_to_bottom = document.getElementById('scroll-to-bottom');
                    if(scroll_to_bottom){
                        scroll_to_bottom.scrollTop = scroll_to_bottom.scrollHeight;
                    }
                },
                getConversations(chat_id, unread_count = 0){
                    axios.get(`/api/get-conversations`, { headers : this.getHeaders(), 
                        params :{
                            chat_id,
                            unread_count
                        }
                    }).then(({data}) => {
                        let chatIndex = this.chats.findIndex(e => e._id == chat_id);
                        if(chatIndex > -1){
                            let participantIndex = this.chats[chatIndex].participants.findIndex(e=> e.employee_id== this.current_user._id);
                            if(participantIndex > -1){ 
                                this.chats[chatIndex].participants[participantIndex].unread_count = 0;
                            } 
                        }  
                        this.conversations = data.conversations; 
                        let that = this; 
                        setTimeout(function(){
                            that.onClickedScoll()
                        },100)
                    }).catch(error => {
                        
                    })
                },
                onClickedEmployee(employee){
                    let chat = this.chats.find(e => { 
                        return  e.employees.some(em => !e.is_group && em._id == employee._id) 
                    }) 
                    if(chat){
                        this.getConversations(chat._id);
                        this.selected_chat = chat;
                        let participant_name = null;
                        if(!chat.is_group){
                            let employee = chat.employees.find(e => e._id != this.current_user._id);
                            participant_name = employee ? employee.name : null;
                        }
                        this.selected_chat_name = chat.is_group? chat.name : participant_name;
                        this.selected_chat_id = chat._id; 
                        this.selected_chat_participants  = chat.is_group ? chat.employees : [];
                        let participant = chat.participants.find(e=> e.employee_id== this.current_user._id)

                    }else{
                        this.isNew = true;
                        this.selected_chat_name = employee.name;
                        this.receiver_id = employee._id;
                        this.selected_chat_id = null;
                        this.conversations = [];
                        this.showContact = 0; 
                    }
                },
                onClickedCreateGroup(){
                    let empIds = [];
                    this.employees.forEach(e => {
                        if(e.selected == true){
                            empIds.push(e._id);
                        }
                    })
                  
                    axios.post(`/api/create-group`, {
                        name : this.group.name,
                        employees : empIds
                    }, { headers : this.getHeaders()}).then(({data}) => { 
                        
                        this.chats.unshift(data.chats[0]) 
                        this.selected_chat_name = data.chats[0].name; 
                        this.selected_chat_id = data.chats[0]._id;
                        this.showContact = 0;
                        this.group.employees = []; 
                    }).catch(error => {

                    })
                },
                onClickedSend(){
                    let data = {  
                        receiver_id : this.receiver_id,
                        chat_id : this.selected_chat_id,
                        message : this.message
                    }

                    axios.post(`/api/store-conversation`, data, { headers : this.getHeaders()}).then(({data}) => {
                        this.conversations.push(data.message);
                        let _tmpChat = this.chats.find(e => e._id == data.chats[0]._id)
                        if(!_tmpChat){
                            
                            this.selected_chat_id = data.chats[0]._id;
                            this.chats.unshift(data.chats[0])
                            this.onSocket(data.chats[0]._id)
                        }
                        let contactIndex = this.chats.findIndex(e => e._id == data.chats[0]._id)
                        this.chats[contactIndex].last_message = this.message;
                        this.chats[contactIndex].last_sender = data.chats[0].last_sender;
                        this.message = '';
                        let that  = this;
                        setTimeout(function(){
                                that.onClickedScoll()
                        },100)
                    })
                },
                onClickedChat(chat, index){ 
                    this.selected_chat = chat;
                    let participant_name = null;
                    if(!chat.is_group){
                        let employee = chat.employees.find(e => e._id != this.current_user._id);
                        participant_name = employee ? employee.name : null;
                    }
                    this.selected_chat_name = chat.is_group? chat.name : participant_name;
                    this.selected_chat_id = chat._id; 
                    this.selected_chat_participants  = chat.is_group ? chat.employees : [];
                    let participant = chat.participants.find(e=> e.employee_id== this.current_user._id)
                    axios.get(`/api/get-conversations`, {
                        headers : this.getHeaders(),
                       
                        params :{
                            chat_id:chat._id,
                            unread_count : participant?participant.unread_count : 0 ,
                        }
                    }).then(({data}) => {
                        let chatIndex = this.chats.findIndex(e => e._id == chat._id);
                        if(chatIndex > -1){
                            let participantIndex = this.chats[chatIndex].participants.findIndex(e=> e.employee_id== this.current_user._id);
                            if(participantIndex > -1){ 
                                this.chats[chatIndex].participants[participantIndex].unread_count = 0;
                            } 
                        } 
                        this.conversations = data.conversations; 
                        let that = this; 
                        setTimeout(function(){
                            that.onClickedScoll()
                        },100)
                    }).catch(error => {
                        
                    })
                },
                getEmployees(){
                    axios.get(`/api/get-employees`, { headers : this.getHeaders()}).then(({data}) => {
                        let _emps = data.employees;
                        _emps.map(e => {
                            e.selected = false;
                        });
                        this.employees = _emps;

                    }).catch(error => {
                        if(error.response.status == 401){
                            // window.location.href = '/login'
                        }
                    })
                },
                loadData(){ 
                    axios.get(`/api/get-chats`, {  headers : this.getHeaders()}).then(({data}) => {
                        this.chats = data.chats;
                        
                        this.chats.forEach(chat => {
                            this.onSocket(chat._id)
                        })
                    }).catch(error => {
                       
                        if(error.response.status == 401){
                            console.log(error.response.status)
                            window.location.href = '/login'
                        }
                    })
                },
                listeningNewGroup(){
                    let that  = this;
                    this.socket.on(`new-group-noti-${this.current_user._id}`, (chats) => {  
                         
                        that.chats.unshift(chats[0])
                        this.onSocket(chats[0]._id)
                    });
                },
                whoAmI(){
                    axios.get(`/api/whoami`, {  headers : this.getHeaders()}).then(({data}) => {
                        this.current_user = data;
                        this.listeningNewGroup();
                    }).catch(error => {
                        if(error.response.status == 401){
                            window.location.href = '/login'
                        }
                    })
                },
                getHeaders(){
                    return {      
                        "x-access-token": localStorage.getItem('token'),      
                        "Content-Type": "application/json",      
                        "Accept": "application/json",    
                    }; 
                }
            },
            mounted(){
                this.whoAmI();
                this.getEmployees();
                this.loadData(); 
                   
            }
        }).mount('#frame')
      </script>
 </body>
</html>